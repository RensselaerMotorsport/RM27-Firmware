local handle = CanComms.TxOpen(true);

if (Motor.ESC.CAN Bus neq Motor.ESC.CAN Bus.Not in Use) {

	local ok = true;
	local bus = Motor.ESC.CAN Bus.AsInteger() - 1;

	CanComms.TxInitialise(handle, 8);
	// Torque Mode - Send desired torque
	CanComms.SetUnsignedInteger	(handle,  0, 16, Convert.ToUnsignedInteger( Motor.Torque*10 )); 
	// Check for testing mode
	if (Motor.Testing.Enable Testing eq Motor Test Enumeration.Enabled) {
		// Speed Mode Enable (bit 2) - 0 = Do not override, 1 = if controller is in torque mode->override
		CanComms.SetBit(handle, 42, Convert.ToUnsignedInteger(Motor.Testing.Enable Testing) );						//This isn't amazing, but it's fine
		// Speed Mode - Send desired speed
		CanComms.SetUnsignedInteger	(handle, 16, 16, Convert.ToUnsignedInteger( Motor.Testing.Test Speed ));
	}
	// Desired Direction - 0 = Reverse, 1 = Forward
	CanComms.SetUnsignedInteger	(handle, 32, 8, Motor.ESC.Motor Direction);
	
	// Byte 5
	// Inverter Enable (bit 0) - 0 = off, 1 = on
	CanComms.SetBit(handle, 40, /* enable boolean */)
	// Inverter Discharge (bit 1) - 0 = disable discharge, 1 = enable discharge
	CanComms.SetBit(handle, 41, /* enable boolean */);
	
	if (Motor.Testing.Force Torque Limit eq Force Torque Limit Enumeration.Enabled) {
		// Commanded Torque Limit - 0 = sets to default
		CanComms.SetUnsignedInteger	(handle, 48, 16, Convert.ToUnsignedInteger( Motor.Testing.Torque Limit*10 ));
	}
	else if (Motor.Testing.Force Torque Limit eq Force Torque Limit Enumeration.Disabled) {
		// Commanded Torque Limit - 0 = sets to default
		CanComms.SetUnsignedInteger	(handle, 48, 16, Convert.ToUnsignedInteger(250));
	}
	
	ok = CanComms.TxStandard(handle, bus, Constants.Command Message Address);
	
	ok = ok; // Done to make MoTeC Build Happy
}
